- name: 'install borg'
  get_url:
    url: https://github.com/borgbackup/borg/releases/download/1.1.10/borg-linux64
    dest: /usr/local/bin/borg
    checksum: sha256:6338d67aad4b5cd327b25ea363e30f0ed4abc425ce2d6a597c75a67a876ef9af
    mode: '0755'

- name: 'install packages'
  apt:
    name: '{{item}}'
    state: latest
  with_items:
    - parallel
    - apache2
    - socat
    - jq

- name: 'install pip packages'
  pip:
    name: '{{item}}'
    state: latest
    executable: pip3
  with_items:
    - awscli

- name: 'create directories'
  file:
    path: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - /backup
    - /backup/scripts
    - /backup/repos
    - /backup/locks
    - /backup/logs
    - /backup/socks
    - /backup/monitoring
    - /backup/monitoring/webroot

- name: 'deploy scripts'
  copy:
    src: '{{ item }}'
    dest: /backup/scripts
    owner: root
    group: root
    mode: 0755
  with_items:
    - backup.sh
    - backup-object.sh
    - backup-object-task.sh
    - backup-status.py

- name: 'prepare configuration'
  set_fact:
    backup_config:
      objects: "{{ groups['operations'] | map('extract', hostvars) | list | json_query('[].{ key: inventory_hostname, value: ansible_host }') | items2dict }}"
      retention:
        keep:
          within: "{{ backup_retention_keep_within | default('1d') }}"
          daily: "{{ backup_retention_keep_daily | default(7) }}"
          weekly: "{{ backup_retention_keep_weekly | default(4) }}"
          monthly: "{{ backup_retention_keep_monthly | default(12) }}"
          yearly: "{{ backup_retention_keep_yearly | default(2) }}"
      monitoring:
        max_age_hours: "{{ backup_monitoring_max_age_hours | default(6) }}"
      upstream:
        aws:
          bucket_url: "{{ backup_upstream_aws_bucket_url }}"
          access_key_id: "{{ backup_upstream_aws_access_key_id }}"
          secret_access_key: "{{ backup_upstream_aws_secret_access_key }}"

- name: 'write configuration'
  copy:
    content: "{{ backup_config | to_nice_json }}"
    dest: /backup/config.json
    owner: root
    group: root
    mode: 0644

- name: 'generate ssh key'
  shell: ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""
  args:
    creates: /root/.ssh/id_rsa

- name: 'fetch ssh key'
  fetch:
    src: /root/.ssh/id_rsa.pub
    dest: '{{ inventory_dir }}/keys/backup_{{ inventory_hostname }}.pub'
    flat: yes

- name: 'setup cronjob'
  cron:
    name: backup-service
    cron_file: backup-service
    minute: '0'
    user: root
    job: '/backup/scripts/backup.sh'

# configure firewall
- name: 'allow http traffic for monitoring'
  copy:
    src: 'packetfilter-config.sh'
    dest: '/etc/packetfilter/10-backupservice.sh'
    owner: root
    group: root
    mode: 0755
  notify: restart packetfilter

- name: run notified handler
  meta: flush_handlers

# configure apache
- name: 'detect enabled apache modules'
  command: 'apachectl -M'
  changed_when: false
  register: enabled_apache_modules

- name: 'enable apache cgi'
  command: 'a2enmod cgi'
  when: '"cgid_module" not in enabled_apache_modules.stdout'
  notify: restart apache

- name: 'remove default apache vhost'
  file:
    state: absent
    path: '/etc/apache2/sites-enabled/000-default.conf'
  notify: restart apache

- name: 'vhost configuration'
  copy:
    content: |
      <Directory "/backup/monitoring/webroot">
        AddHandler cgi-script .py
        DirectoryIndex index.py
        Options ExecCGI
        Require all granted
      </Directory>
      <VirtualHost *:80>
        ServerAdmin {{ base_devops_email }}
        DocumentRoot /backup/monitoring/webroot
      </VirtualHost>
    dest: /backup/monitoring/vhost.conf
    owner: root
    group: root
    mode: 0644
  notify: restart apache

- name: 'vhost configuration : symlink'
  file:
    src: /backup/monitoring/vhost.conf
    dest: /etc/apache2/sites-enabled/000-monitoring.conf
    owner: root
    group: root
    state: link
  notify: restart apache

- name: 'monitoring handler'
  copy:
    content: |
      #!/usr/bin/env python
      import imp
      mod = imp.load_source('backupstatus', '/backup/scripts/backup-status.py')
      print "Content-Type: text/plain;charset=utf-8"
      print
      print "OK" if mod.status()["ok"] else "ERROR"
    dest: /backup/monitoring/webroot/index.py
    owner: root
    group: root
    mode: 0755
  notify: restart apache

# scan for backup object keys

- name: 'scan for ssh host keys of backup objects'
  shell: 'touch ~/.ssh/known_hosts; ssh-keygen -f ~/.ssh/known_hosts -F "{{ item }}" > /dev/null || ssh-keyscan -T 10 "{{ item }}" -p 22 >> ~/.ssh/known_hosts'
  register: 'command_ssh_keyscan'
  changed_when: "command_ssh_keyscan.stderr|length > 0"
  with_items: "{{ groups['operations'] | map('extract', hostvars, ['ansible_host']) | list }}"

- name: run notified handler
  meta: flush_handlers
