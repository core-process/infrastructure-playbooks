- name: 'install required backup software'
  apt: name='{{item}}' state=latest
  with_items:
    - rdiff-backup
    - duplicity
    - parallel
    - apache2

- name: 'install boto for duplicity'
  pip: name='{{item}}' state=latest
  with_items:
    - boto

- name: 'create directories'
  file:
    path: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - /backup
    - /backup/scripts
    - /backup/config
    - /backup/repos
    - /backup/locks
    - /backup/logs
    - /backup/monitoring
    - /backup/monitoring/webroot

- name: 'deploy scripts'
  copy:
    src: '{{ item }}'
    dest: /backup/scripts
    owner: root
    group: root
    mode: 0755
  with_items:
    - backup.sh
    - backup-object.sh
    - backup-object-main.sh
    - backup-object-rdiff-backup.sh
    - backup-object-duplicity.sh
    - backup-status.py

- name: 'write configuration : object list'
  copy:
    content: "{{ groups['operations'] | map('extract', hostvars, ['ansible_host']) | join('\n') }}"
    dest: /backup/config/objects.list
    owner: root
    group: root
    mode: 0644

- name: 'write configuration : shell variables'
  copy:
    content: |
      CONFIG_AWS_KEY_ID="{{ backup_aws_key_id }}"
      CONFIG_AWS_KEY_SECRET="{{ backup_aws_key_secret }}"
      CONFIG_AWS_S3_URL="{{ backup_aws_s3_url }}"
      CONFIG_REMOTE_FULL_IF_OLDER_THAN="{{ backup_remote_full_if_older_than }}"
      CONFIG_REMOTE_REMOVE_OLDER_THAN="{{ backup_remote_remove_older_than }}"
      CONFIG_LOCAL_REMOVE_OLDER_THAN="{{ backup_local_remove_older_than }}"
    dest: /backup/config/vars.sh
    owner: root
    group: root
    mode: 0644

- name: 'write configuration : yaml variables'
  copy:
    content: "last_not_older_than: {{ backup_last_not_older_than }}"
    dest: /backup/config/vars.yaml
    owner: root
    group: root
    mode: 0644

- name: 'generate ssh key'
  shell: ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""
  args:
    creates: /root/.ssh/id_rsa

- name: 'fetch ssh key'
  fetch:
    src: /root/.ssh/id_rsa.pub
    dest: '{{ inventory_dir }}/keys/backup_{{ inventory_hostname }}.pub'
    flat: yes

- name: 'setup cronjob : backup service'
  cron:
    name: backup-service
    cron_file: backup-service
    minute: 0
    user: root
    job: '/backup/scripts/backup.sh'

# configure firewall
- name: 'allow http traffic for monitoring'
  lineinfile:
    dest: '/etc/{{ item[0] }}/rules'
    line: '{{ item[1] }}'
  with_nested:
    - [ 'shorewall', 'shorewall6' ]
    - [ 'ACCEPT all fw tcp 80' ]
  notify: restart shorewall

- meta: flush_handlers

# configure apache
- name: 'detect enabled apache modules'
  command: 'apachectl -M'
  changed_when: false
  register: enabled_apache_modules

- name: 'enable apache cgi'
  command: 'a2enmod cgi'
  when: '"cgid_module" not in enabled_apache_modules.stdout'
  notify: restart apache

- name: 'remove default apache vhost'
  file:
    state: absent
    path: '/etc/apache2/sites-enabled/000-default.conf'
  notify: restart apache

- name: 'vhost configuration'
  copy:
    content: |
      # enable cgi for python scripts
      <Directory "/backup/monitoring/webroot">
        AddHandler cgi-script .py
        DirectoryIndex index.py
        Options ExecCGI
        Require all granted
      </Directory>
      # serve monitoring script
      <VirtualHost *:80>
        ServerAdmin {{ base_devops_email }}
        DocumentRoot /backup/monitoring/webroot
      </VirtualHost>
    dest: /backup/monitoring/vhost.conf
    owner: root
    group: root
    mode: 0644
  notify: restart apache

- name: 'vhost configuration : enable'
  file:
    src: /backup/monitoring/vhost.conf
    dest: /etc/apache2/sites-enabled/000-monitoring.conf
    owner: root
    group: root
    state: link
  notify: restart apache

- name: 'monitoring handler'
  copy:
    content: |
      #!/usr/bin/env python
      import imp
      mod = imp.load_source('backupstatus', '/backup/scripts/backup-status.py')
      print "Content-Type: text/plain;charset=utf-8"
      print
      print "OK" if mod.status()["ok"] else "ERROR"
    dest: /backup/monitoring/webroot/index.py
    owner: root
    group: root
    mode: 0755
  notify: restart apache

- meta: flush_handlers
