- name: 'install required backup software'
  apt: name='{{item}}' state=latest
  with_items:
    - rdiff-backup
    - duplicity
    - parallel

- name: 'install boto for duplicity'
  pip: name='{{item}}' state=latest
  with_items:
    - boto

- name: 'create directories'
  file:
    path: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - /backup
    - /backup/scripts
    - /backup/config
    - /backup/repos
    - /backup/locks
    - /backup/logs

- name: 'deploy scripts'
  copy:
    src: '{{ item }}'
    dest: /backup/scripts
    owner: root
    group: root
    mode: 0755
  with_items:
    - backup.sh
    - backup-object.sh
    - backup-object-main.sh
    - backup-object-rdiff-backup.sh
    - backup-object-duplicity.sh

- name: 'write configuration : object list'
  copy:
    content: "{{ groups['operations'] | map('extract', hostvars, ['ansible_host']) | join('\n') }}"
    dest: /backup/config/objects.list
    owner: root
    group: root
    mode: 0644

- name: 'write configuration : shell variables'
  copy:
    content: |
      AWS_KEY_ID="{{ backup_aws_key_id }}"
      AWS_KEY_SECRET="{{ backup_aws_key_secret }}"
      AWS_S3_URL="{{ backup_aws_s3_url }}"
      FULL_IF_OLDER_THAN="{{ backup_full_if_older_than }}"
      REMOVE_OLDER_THAN="{{ backup_remove_older_than }}"
    dest: /backup/config/vars.sh
    owner: root
    group: root
    mode: 0644

- name: 'generate ssh key'
  shell: ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""
  args:
    creates: /root/.ssh/id_rsa

- name: 'fetch ssh key'
  fetch:
    src: /root/.ssh/id_rsa.pub
    dest: '{{ inventory_dir }}/keys/backup_{{ inventory_hostname }}.pub'
    flat: yes

- name: 'setup cronjob : backup service'
  cron:
    name: backup-service
    cron_file: backup-service
    minute: 0
    user: root
    job: '/backup/scripts/backup.sh'
